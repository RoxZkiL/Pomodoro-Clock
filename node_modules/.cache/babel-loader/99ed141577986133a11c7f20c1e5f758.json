{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc1\\\\Desktop\\\\Pomodoro-App-main\\\\src\\\\components\\\\Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"./SettingsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = \"#f54e4e\";\nconst green = \"#4aec8c\";\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState(\"work\");\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function initTimer() {\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  function switchMode() {\n    const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n    const nextSeconds = (nextMode === \"work\" ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n    setMode(nextMode);\n    modeRef.current = nextMode;\n    setSecondsLeft(nextSeconds);\n    secondsLeftRef.current = nextSeconds;\n  }\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    initTimer();\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === \"work\" ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + \":\" + seconds,\n      styles: buildStyles({\n        textColor: \"#fff\",\n        pathColor: mode === \"work\" ? red : green,\n        tailColor: \"rgba(255,255,255,.2)\"\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"qbDDvLhfSBzd+sXN+6DGwZsyaS4=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","initTimer","current","workMinutes","switchMode","nextMode","nextSeconds","breakMinutes","tick","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","textColor","pathColor","tailColor","marginTop","setShowSettings"],"sources":["C:/Users/pc1/Desktop/Pomodoro-App-main/src/components/Timer.jsx"],"sourcesContent":["import { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport PauseButton from \"./PauseButton\";\r\nimport PlayButton from \"./PlayButton\";\r\nimport SettingsButton from \"./SettingsButton\";\r\nimport { useContext, useState, useEffect, useRef } from \"react\";\r\nimport SettingsContext from \"./SettingsContext\";\r\n\r\nconst red = \"#f54e4e\";\r\nconst green = \"#4aec8c\";\r\n\r\nfunction Timer() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  const [mode, setMode] = useState(\"work\");\r\n  const [secondsLeft, setSecondsLeft] = useState(0);\r\n\r\n  const secondsLeftRef = useRef(secondsLeft);\r\n  const isPausedRef = useRef(isPaused);\r\n  const modeRef = useRef(mode);\r\n\r\n  function initTimer() {\r\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n  }\r\n  function switchMode() {\r\n    const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\r\n\r\n    const nextSeconds =\r\n      (nextMode === \"work\"\r\n        ? settingsInfo.workMinutes\r\n        : settingsInfo.breakMinutes) * 60;\r\n\r\n    setMode(nextMode);\r\n    modeRef.current = nextMode;\r\n\r\n    setSecondsLeft(nextSeconds);\r\n    secondsLeftRef.current = nextSeconds;\r\n  }\r\n  function tick() {\r\n    secondsLeftRef.current--;\r\n\r\n    setSecondsLeft(secondsLeftRef.current);\r\n  }\r\n\r\n  useEffect(() => {\r\n    initTimer();\r\n\r\n    const interval = setInterval(() => {\r\n      if (isPausedRef.current) {\r\n        return;\r\n      }\r\n      if (secondsLeftRef.current === 0) {\r\n        return switchMode();\r\n      }\r\n\r\n      tick();\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [settingsInfo]);\r\n\r\n  const totalSeconds =\r\n    mode === \"work\"\r\n      ? settingsInfo.workMinutes * 60\r\n      : settingsInfo.breakMinutes * 60;\r\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\r\n\r\n  const minutes = Math.floor(secondsLeft / 60);\r\n\r\n  let seconds = secondsLeft % 60;\r\n  if (seconds < 10) seconds = \"0\" + seconds;\r\n\r\n  return (\r\n    <div>\r\n      <CircularProgressbar\r\n        value={percentage}\r\n        text={minutes + \":\" + seconds}\r\n        styles={buildStyles({\r\n          textColor: \"#fff\",\r\n          pathColor: mode === \"work\" ? red : green,\r\n          tailColor: \"rgba(255,255,255,.2)\",\r\n        })}\r\n      />\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        {isPaused ? (\r\n          <PlayButton\r\n            onClick={() => {\r\n              setIsPaused(false);\r\n              isPausedRef.current = false;\r\n            }}\r\n          />\r\n        ) : (\r\n          <PauseButton\r\n            onClick={() => {\r\n              setIsPaused(true);\r\n              isPausedRef.current = true;\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}